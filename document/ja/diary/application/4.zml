\zml?|version="1.1"|;
\xml?|version="1.0",encoding="UTF-8"|;


\page<
  \name<Groovy のループ速度比較>

  \h1<日記 (2016 年 11 月 9 日)>
  \p<
    プログラムでループを回すというのはよくやると思うんですが、Groovy ではループの方法が主に for 文と \m<each> メソッドの 2 通りあります。
    速度にどのくらいの違いがあるのか気になったので調べてみました。
  >
  \p<
    まずは Java でもよくやる由緒正しき for 文です。
    ついでに、ループ回数を保持する変数がプリミティブ (\m<int>) である場合とラッパークラス (\m<Integer>) である場合も比較しておきます。
    Groovy では、プリミティブで宣言しても内部的には全てラッパークラスで扱われるらしいんですが、どう違いが出てくるんでしょうか。 
  >
  \pre~*<
    // 通常 for 文 (プリミティブ版)
    for (int i = 0 ; i `< number ; i ++) {
    }
    // 通常 for 文 (ラッパークラス版)
    for (Integer i = 0 ; i `< number ; i ++) {
    }
  >
  \p<
    次は拡張 for 文に \m<Range> オブジェクトを渡してみます。
    Groovy でもそのままの構文で使えます。
  >
  \pre~*<
    // 拡張 for 文 (プリミティブ版)
    for (int i : 0 ..`< number) {
    }
    // 拡張 for 文 (ラッパークラス版)
    for (Integer i : 0 ..`< number) {
    }
  >
  \p<
    最後は \m<each> メソッドです。
  >
  \pre~*<
    // each メソッド (プリミティブ版)
    (0 ..`< number).each() { int i -`>
    }
    // each メソッド (ラッパークラス版)
    (0 ..`< number).each() { Integer i -`>
    }
  >
  \p<
    繰り返し回数の \m<number> を 1000 万にして試した結果が以下になります。
  >
  \table<
    \tr<\th<タイプ>\th<所要時間>>
    \tr<\td<通常 for 文 (プリミティブ版)>\td<5 ms>>
    \tr<\td<通常 for 文 (ラッパークラス版)>\td<78 ms>>
    \tr<\td<拡張 for 文 (プリミティブ版)>\td<20 ms>>
    \tr<\td<拡張 for 文 (ラッパークラス版)>\td<20 ms>>
    \tr<\td<\m<each> メソッド (プリミティブ版)>\td<577 ms>>
    \tr<\td<\m<each> メソッド (ラッパークラス版)>\td<486 ms>>
  >
  \p<
    ということで、一番速いのは由緒正しき普通の for 文を普通にプリミティブ型で使った場合らしいです。
    同じ普通の for 文でも、ループ変数をラッパークラス型にするとかなり遅くなるのは、\c<i ++> の実行がラッパークラスになってる分だけ遅くなってるからだと思います。
    次に速いのは拡張 for 文で、これについてはプリミティブ型でもラッパークラス型でも速度の違いがあまり出ませんでした。
    一番遅いのは \m<each> メソッドで、ダントツで遅いです。
    ただ、同じ \m<each> メソッドでも、こちらはラッパークラスを使った方が速いようです。
    おそらく、\c<0 ..`< number> で \m<Range> オブジェクトを作るときに、内部的に \m<Integer> として数値を扱っているため、プリミティブ型で受け取ろうとするとアンボクシング処理が入るからでしょうか。
  >
  \p<
    ちなみに、静的コンパイルにしても特に結果は変わりませんでした。
    メソッド呼び出しとかがこれといってないので、当然といえば当然ですが。
  >
  \p<
    ということで、Groovy でループを回したければ普通に for 文を使うのが一番速いということでした。
    せっかく Groovy なんだし \m<each> とか使っていきたいところですが、遅いのが難点ですね\k<…>。
  >

>