\zml?|version="1.1"|;
\xml?|version="1.0",encoding="UTF-8"|;


\page<
  \name<継続とラムダ計算>
  \use-math|prefix="1"|;

  \h1<日記 (2020 年 7 月 5 日)>
  \p<
    プログラミング言語の Scheme には call`/cc という関数が用意されていて、これを用いると「継続」と呼ばれる情報を好きなタイミングで取り出して、別の関数の引数として渡すなどプログラム中で自由に扱うことができる。
    この機構は大域脱出やコルーチンを実装するのに利用できるなど、応用の幅が広い。
    さらに、call`/cc を含む体系は Curry–Howard 対応 (プログラムと証明の間の対応) のもとで古典論理に対応することが知られており、これにより、直観主義論理の範囲では証明できない二重否定除去則や Peirce の法則について、その計算論的な意味付けがなされたことになる。
  >
  \p<
    これから続く日記シリーズで、継続と call`/cc について理解しようとして私が勉強した内容をまとめていくつもりである。
    なお、議論の基盤としては、Scheme などの実用プログラミング言語ではなく、それを数学的に形式化したラムダ計算の体系を用いることにする。
    私はこれらのトピックについて本格的に触れるのが初めてなので、完璧な説明をすることは不可能だが、継続と call`/cc を理解したいという人にとっての助けになれば幸いである。
  >
  \p<
    1 日目である今日は、継続とは何かについて触れようと思う。
    これを書くにあたっては Griffin\mref|type="bib",ref="gftn"|; を大いに参考にした。
  >
  \p<
    まず、通常のラムダ計算の体系を思い出そう。
    しばらくの間、議論を簡単にするために型なしの体系を考えることにし、さらに項の構築子としては関数のみを許すことにする。
    以降、これを単に &m<\sb<\rm<`l>><>> と呼ぶことにする。
  >
  \thm|type="def"|<
    \p<
      計算体系 &m<\sb<\rm<`l>><>> の言語を以下のように定める。
      可算集合 &m<\bb<V>> を固定し、この元を \def<変項\fl<variable>> と呼ぶ。
      さらに、変項をメタ変項 &m<x> で表すことにし、その上で、
      &mb<
        \array|align="rcl"|<
          \c<M> \c<\ccoloneqq;> \c<x \mid; \rm<`l> x. \sfun; M \mid; M M> \br;
          \c<V> \c<\ccoloneqq;> \c<x \mid; \rm<`l> x. \sfun; M> 
        >
      >
      とする。
      このとき、&m<M> と &m<V> で定まるものをそれぞれ \def<項\fl<term>> と \def<値\fl<value>> という。
    >
  >
  \p<
    ラムダ計算の体系を定義するためにあとしなければならないことは、項の簡約規則 (もしくは計算規則) を定めることである。
    ここで問題となるのが評価順序であるが、差し当たり値呼び (先に引数を値まで簡約してから関数適用を簡約する) を採用することにする。
    簡約の厳密な定式化には、評価環境の概念を用いる。
  >
  \thm|type="def",id="evenv"|<
    \p<
      計算体系 &m<\sb<\rm<`l>><>> において、項と値をそれぞれメタ変項 &m<M> と &m<V> で表すことにし、
      &mb<
        \array|align="rcl"|<
          \c<E> \c<\ccoloneqq;> \c<`[`] \mid; E M \mid; V E> \br;
        >
      >
      とする。
      これによって定まるものを \def<値呼び評価環境\fl<call-by-value evaluation environment>> という。
    >
  >
  \p<
    定義から見て分かるように、評価環境 &m<E> の中には 1 箇所だけ &m<`[`]> という記号が含まれている。
    この &m<`[`]> を何らかの項 &m<M> で置き換えて得られる項を &m<E `[M`]> で表す。
  >
  \thm|type="def"|<
    \p<
      計算体系 &m<\sb<\rm<`l>><>> の項の上の関係 &m<\squigrarr|ord|;> を、値呼び評価環境 &m<E> と項 &m<M> と値 &m<V> に対し、
      &mb<
        E `[(\rm<`l> x. \sfun; M) V`] \squigrarr; E `[M `[x \coloneqq; V`]`]
      >
      で定める。
      これを \def<値呼び簡約\fl<call-by-value reduction>> という。
    >
  >
  \p<
    定義から、ある評価環境の中に &m<(\rm<`l> x. \sfun; M) V> という関数適用の形が現れていれば、それは &m<M `[x \coloneqq; V`]> という実際に引数を関数内部に代入した形に評価される。
    したがって、評価環境は関数適用の評価をする際の (評価自体とは無関係な) 外側を表していて、その意味で「環境」なのである。
    しかし、この評価環境は別の見方もすることができる。
  >
  \p<
    何らかの項 &m<P, Q> と値 &m<\sb<V><0>> をとり、
    &mb<
      \array|align="rcl"|<
        \c<F> \c<\equiv;> \c<\rm<`l> x. \sfun; P> \br;
        \c<G> \c<\equiv;> \c<\rm<`l> y. \sfun; Q> \br;
        \c<\sb<M><0>> \c<\equiv;> \c<G (F \sb<V><0>)>
      >
    >
    とおく。
    すなわち、&m<F, G> はともに関数で、&m<\sb<M><0>> はその 2 つの関数を順番に &m<\sb<V><0>> に適用した項である。
    このとき &m<\sb<M><0>> は、
    &mb<
      \array|align="rcl"|<
        \c<\sb<M><0>> \c<\equiv;> \c<\sb<E><0> `[F \sb<V><0>`]> \br;
        \c<\sb<E><0>> \c<\equiv;> \c<G `[`]>
      >
    >
    と分解できるから、簡約の定義により、&m<\sb<M><0>> の中にある &m<F \sb<V><0>> すなわち &m<(\rm<`l> x. \sfun; P) \sb<V><0>> の部分が簡約され、&m<P `[x \coloneqq; \sb<V><0>`]> に置き換わる。
    つまり、
    &mb<
      \array|align="rcl"|<
        \c<\sb<M><1>> \c<\equiv;> \c<G \sb<V><1>> \br;
        \c<\sb<V><1>> \c<\equiv;> \c<P `[x \coloneqq; \sb<V><0>`]>
      >
    >
    とおけば、&m<\sb<M><0>> は &m<\sb<M><1>> に簡約される。
    ここで簡単のため、&m<\sb<V><1>> はすでに値になっているとする (そうでなければ値まで簡約した項を改めて &m<\sb<V><1>> とすれば良い)。
    このとき &m<\sb<M><1>> は、
    &mb<
      \array|align="rcl"|<
        \c<\sb<M><1>> \c<\equiv;> \c<\sb<E><1> `[G \sb<V><1>`]> \br;
        \c<\sb<E><1>> \c<\equiv;> \c<`[`]>
      >
    >
    と分解されるから、
    &mb<
      \sb<M><2> \equiv; Q `[y \coloneqq; \sb<V><1>`]
    >
    に簡約される。
    以上をまとめると、
    &mb<
      G (F \sb<V><0>) \squigrarr; G \sb<V><1> \squigrarr; \sb<M><2>
    >
    という簡約列が存在するということである。
    言葉で言えば、&m<\sb<V><0>> から始めて、最初に &m<F> を適用してその結果 &m<\sb<V><1>> を計算し、次にそれに &m<G> を適用してその結果を計算したということになる。
  >
  \p<
    ここで、最初の &m<\sb<E><0>> の形を思い出そう。
    これは &m<G `[`]> であった。
    この形は、&m<`[`]> という記号に対して &m<G> を適用した項と読むことができる。
    &m<\sb<M><0>> の簡約列を思い出すと、この「&m<G> を適用する (そしてその結果を計算する)」という操作は、最初の簡約である &m<F \sb<V><0>> を &m<\sb<V><1>> に置き換える操作の後に行われる操作であった。
    すなわち &m<\sb<E><0>> は、&m<\sb<M><0>> を 1 回簡約した後にさらに何を行うべきかを表現していると見なすことができる。
  >
  \p<
    以上に見たように、評価環境は、そのとき行おうとしている簡約の後に行われるべき計算全体を表している。
    これが「継続」の正体である。
    すなわち、今回の形式化では、継続とは評価環境そのものである。
  >
  \p<
    Scheme では、call`/cc という関数のおかげで、この継続を好きなタイミングで取得し、変数に束縛したり関数の引数として渡したりすることができる。
    このように、Scheme の継続は他の普通の値と同じようにプログラム内で利用することができるので、「一級継続」と呼ばれている。
  >
  \p<
    通常のラムダ計算では、継続 (つまり評価環境) は評価をするときにメタな視点から使われるにすぎず、言語の中から操作することはできない。
    したがって、言語の中で継続を操作できるようにするためには、何らかの方法で通常のラムダ計算を拡張する必要がある。
    その拡張の 1 つに Parigot\mref|type="bib",ref="plca"|; の &m<\rm<`l`m>>-計算があり、ここでは継続を変数に束縛する構文を追加することで一級継続を実現している。
    しかし、これにいきなり触れると定義を直観的に理解するのが少し難しいので、まずはよりシンプルな Felleisen et al\mref|type="bib",ref="fsts"|; の &m<\sb<\rm<`l>><\rm<c>>>-計算を扱おうと思う。
  >
  \p<
    &m<\sb<\rm<`l>><\rm<c>>>-計算は、通常のラムダ計算に &m<\tt<abort>> と &m<\tt<cont>> という 2 つの演算子を加えたものである。
    形式的には以下の通りである。
  >
  \thm|type="def"|<
    \p<
      計算体系 &m<\sb<\rm<`l>><\rm<c>>> の言語を、&m<\sb<\rm<`l>><>> の言語を拡張する形で定める。
      すなわち、項をメタ変数 &m<M> で表して、
      &mb<
        \array|align="rcl"|<
          \c<M> \c<\ccoloneqq;> \c<\cdots; \mid; \tt|fun|<abort> M \mid; \tt|fun|<cont> M> \br;
        >
      >
      と拡張する。
      なお、値については何も追加しない。
    >
  >
  \p<
    追加された 2 つの演算子に関する簡約規則は以下のように定義される。
    どちらの簡約規則も、変化する部分は評価環境の内部に留まらず、項全体が変化する。
  >
  \thm|type="def"|<
    \p<
      計算体系 &m<\sb<\rm<`l>><\rm<c>>> の値呼び簡約 &m<\squigrarr|ord|;> を、&m<\sb<\rm<`l>><>> の値呼び簡約に対して以下を追加する形で定める。
      すなわち、値呼び評価環境 &m<E> と項 &m<M> に対し、
      &mb<
        \array|align="rcl"|<
          \c<E `[\tt|fun|<abort> M`]> \c<\squigrarr;> \c<M> \br;
          \c<E `[\tt|fun|<cont> M`]> \c<\squigrarr;> \c<M (\rm<`l> x. \sfun; \tt|fun|<abort> E `[x`])>
        >
      >
      を追加する。
    >
  >
  \p<
    以降、&m<\squigrarr|ord|;> の反射推移閉包を &m<\sp<\squigrarr|ord|;><*>> で表すことにする。
    すなわち、&m<\squigrarr|ord|;> が 1 ステップの簡約を表すのに対し、&m<\sp<\squigrarr|ord|;><*>> は 0 ステップ以上の任意回数の簡約を表す。
  >
  \p<
    新しい演算子の直観的な説明は次の通りである。
    &m<\tt<abort>> の役割は、その時点での評価環境を破棄することである。
    定義によって、&m<E `[\tt|fun|<abort> M`]> という形の項は &m<M> に簡約される。
    この簡約後の項には &m<E> は現れていない。
    したがって、計算の途中で &m<\tt|fun|<abort> M> という形に遭遇した場合、これの簡約によりその時点の評価環境が破棄されることになるわけである。
  >
  \p<
    &m<\tt<cont>> の役割は、その時点での継続 (つまり評価環境) を関数の引数に渡して利用できるようにすることである。
    定義を見ると、&m<E `[\tt|fun|<cont> M`]> という形の項は &m<\c<M (\rm<`l> x. \sfun; \tt|fun|<abort> E `[x`])>> に簡約される。
    ここに出てくる &m<\rm<`l> x. \sfun; \tt|fun|<abort> E `[x`]> という部分項は、引数を &m<E> で包んだものを返す関数であるから、これを何らかの項に適用することで、その項を &m<\tt|fun|<cont> M> に遭遇したときの評価環境のもとで評価することができるようになる。
    つまり、この &m<\rm<`l> x. \sfun; \tt|fun|<abort> E `[x`]> は、&m<\tt|fun|<cont> M> を簡約した際の継続を関数の形で言語内で利用できるようにしたものなので、以降では継続関数と呼ぶことにする。
  >
  \p<
    これらの演算子の応用の 1 つに大域脱出がある。
    大域脱出は、多くの実用プログラミング言語に例外捕捉や関数の return 文などの形で実装されている他、C 言語には setjmp と longjmp というそのままの関数が用意されている。
  >
  \p<
    何らかの評価環境 &m<E> と項 &m<P> をとって、
    &mb<
      M \equiv; E `[\tt|fun|<cont> (\rm<`l> k. \sfun; k P)`]
    >
    という項を考えよう。
    ここで、
    &mb<
      Q \equiv; \rm<`l> x. \sfun; \tt|fun|<abort> E `[x`]
    >
    とおけば、
    &mb<
      &mark<\wheart;>
      \array|align="rcl"|<
        \c<M> \c<\squigrarr;> \c<(\rm<`l> k. \sfun; k P) Q> \br;
        \c; \c<\squigrarr;> \c<Q \sfun; P `[k \coloneqq; Q`]>
      >
    >
    と簡約される。
    &m<Q> は値だから、この後は &m<P `[k \coloneqq; Q`]> の部分が簡約されていくことになる。
  >
  \p<
    仮に &m<P> の中に &m<k> が自由に全く現れなかったとしよう。
    このとき、&m<P `[k \coloneqq; Q`]> は &m<P> そのものである。
    そこで、&m<P> が最終的に値 &m<V> に簡約されたとする。
    すると、簡約列 &m<\wheart;> の続きは、
    &mb<
      \array|align="rcl"|<
        \c<\cdots;> \c<\sp<\squigrarr;><*>> \c<Q V> \br;
        \c; \c<\squigrarr;> \c<\tt|fun|<abort> E `[V`]> \br;
        \c; \c<\squigrarr;> \c<E `[V`]>
      >
    >
    となる。
  >
  \p<
    &m<P> の中に &m<k> が自由に現れ、&m<P> の簡約の仮定でそのような &m<k> がいずれ簡約される場合を考える。
    &m<P> の中には &m<k> が複数個現れるかもしれないが、一番最初に簡約される &m<k> に注目することにする。
    これから簡約しようとしている項は &m<P `[k \coloneqq; Q`]> であるが、ここでは &m<P> の中にあった &m<k> は &m<Q> に置き換わっていることに注意しよう。
    &m<Q> は継続関数であるから、&m<Q> が何らかの項に適用される形で使われることが想定されている。
    そこで、&m<Q> は &m<P `[k \coloneqq; Q`]> の中に &m<Q W> という形で現れると仮定し、簡単のため &m<W> は値であるとする。
    以上の仮定を置くと、&m<P `[k \coloneqq; Q`]> を簡約していくと、ある評価環境 &m<E'> によって &m<E' `[Q W`]> と表される項にいずれは簡約されるはずである。 
    したがって、簡約列 &m<\wheart;> の続きは、
    &mb<
      \array|align="rcl"|<
        \c<\cdots;> \c<\sp<\squigrarr;><*>> \c<Q \sfun; E' `[Q W`]> \br;
        \c; \c<\squigrarr;> \c<Q \sfun; E' `[\tt|fun|<abort> E `[W`]`]> \br;
        \c; \c<\squigrarr;> \c<E `[W`]>
      >
    >
    となる。
  >
  \p<
    以上をまとめれば、
    &mb<
      E `[\tt|fun|<cont> (\rm<`l> k. \sfun; k P)`] \sp<\squigrarr;><*> \case<
        \c<E `[V`]> \c<(&raw<&m<k> は &m<P> に自由に現れない>, P \sp<\squigrarr;><*> V)> \br;
        \c<E `[W`]> \c<(&raw<&m<k> は &m<P> に自由に現れる>, P \sp<\squigrarr;><*> E' `[k W`])>
      >
    >
    となる。
    これを見ると、次のことが観察できる。
    まず、この簡約によって、&m<\tt|fun|<cont> (\rm<`l> k. \sfun; k P)> の外側である評価環境 &m<E> は変化せず、&m<\tt|fun|<cont> (\rm<`l> k. \sfun; k P)> のみが値に置き換わる。
    置き換わった結果得られる値は、&m<P> の中に &m<k> が自由に現れるかどうかで変化する。
    &m<k> が自由に現れないのなら、通常通り &m<P> が簡約されて得られる値 &m<V> になる。
    一方、&m<k> が自由に現れる場合は、&m<P> がどのような形なのかに関わらず、&m<P> の中で (最初に簡約される) &m<k> に渡された引数 &m<W> になってしまう。
  >
  \p<
    この現象は、&m<\tt|fun|<cont> (\rm<`l> k. \sfun; k P)> が例外の catch 文に相当し、&m<P> の中に現れる &m<k> がそれに対応する throw 文だと考えると、イメージが湧きやすいだろう。
    throw 文が一切現れなければ通常通り評価が進むが、throw 文に引数が渡されてそれが評価されると、他に処理がどんなに残っていようとそこに渡された引数が全体の返り値になる。
  >
  \p<
    さて、最初に Scheme の call`/cc について少し触れたが、この演算子は、
    &mb<
      E `[\tt|fun|<call`/cc> M`] \squigrarr; E `[M (\rm<`l> x. \sfun; \tt|fun|<abort> E `[x`])`]
    >
    という振る舞いをするものとして定式化できる。
    &m<\tt<cont>> との違いは、簡約するときにその時点での評価環境を破棄しない点である。
    この演算子を用いると、上の説明で出てきた項 &m<M> は、
    &mb<
      M = E `[\tt|fun|<call`/cc> (\rm<`l> k. \sfun; P)`]
    >
    とよりシンプルに書くことができる。
  >
  \p<
    なお、
    &mb<
      X \equiv; \rm<`l> m. \sfun; \tt|fun|<cont> (\rm<`l> k. \sfun; k (m k))
    >
    とおくと、任意の項 &m<M> について &m<XM> と &m<\tt|fun|<call`/cc> M> は同値になる。
    したがって、&m<\sb<\rm<`l>><\rm<c>>>-計算において call`/cc の演算を行いたいときに、プリミティブな演算子を新しく言語に追加する必要はなく、上記の &m<X> を使えば良い。
    逆に、プリミティブな演算子として &m<\tt|fun|<call`/cc>> が入っている体系において、
    &mb<
      Y \equiv; \rm<`l> m. \sfun; \tt|fun|<call`/cc> (\rm<`l> k. \sfun; \tt|fun|<abort> m k)
    >
    とおくと、任意の項 &m<M> について &m<YM> と &m<\tt|fun|<cont> M> は同値になる。
  >
  \h1<追記 (2020 年 7 月 6 日)>
  \p<
    大域脱出の説明をしている箇所の記述が少しミスリーディングな気がしたので、内容はそのままに記述を少し書き換えた。
    また、最後の call`/cc に関する箇所により詳しい内容を追加した。
  >
  \h1<参考文献>
  \ol<
    \li|id="fsts"|<M. Felleisen et al (1987)「A syntactic theory of sequential control」『Theoretical Computer Science』52(3):205–237>
    \li|id="gftn"|<T. G. Griffin (1989)「A formulae-as-types notion of control」『Proceedings of the 17th ACM SIGPLAN-SIGACT symposium on principles of programming languages』47–58>
    \li|id="plca"|<M. Parigot (1992)「&m<\rm<`l`m>>-calculus: an algorithmic interpretation of classical natural deduction」『Lecture Notes in Artificial Intelligence』624:190–201>
 >

>