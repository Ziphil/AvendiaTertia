\zml?|version="1.1"|;
\xml?|version="1.0",encoding="UTF-8"|;


\page<
  \name<λμ-計算の定義>
  \use-math|prefix="3"|;

  \h1<日記 (2020 年 7 月 8 日)>
  \p<
    \a|href="52.html"|<7 月 5 日>と \a|href="53.html"|<7 月 6 日>で、継続を言語内で扱うためのラムダ計算の拡張として &m<\sb<\rm<`l>><\rm<c>>>-計算を扱った。
    今日は、これとは別の方法で継続を扱えるようにした拡張である &m<\rm<`l`m>>-計算について触れていく。
    &m<\rm<`l`m>>-計算は、Parigot\ref|type="bib",ref="plca"|; によって古典論理に対応する計算体系として導入されたものである。
    古典論理との対応は次回扱うことにして、今日は純粋に計算体系であるとして見ていくことにする。
  >
  \p<
    &m<\rm<`l`m>>-計算では、通常のラムダ計算での変項に相当するものが 2 種類あり、片方は通常通り変項と呼び、もう片方は名前と呼ぶ。
    変項が項を表す一方で、名前は継続を表すものと見なすことができる。
    また、変項に相当するものが 2 種類になったのを受けて、それを束縛する構文も 2 種類あり、片方は通常通り &m<\rm<`l>> で表されて関数を作り、もう片方は &m<\rm<`m>> で表されて名前を束縛する。
  >
  \thm|type="def"|<
    \p<
      計算体系 &m<\rm<`l`m>> の言語を以下のように定める。
      可算集合 &m<\bb<V>> と &m<\bb<N>> を固定し、この元をそれぞれ\em<変項\fl<variable>> と\em<名前\fl<name>> と呼ぶ。
      さらに、変項と名前をそれぞれメタ変項 &m<x> と &m<a> で表すことにし、その上で、
      &mb<
        \array|align="rcl"|<
          \c<M> \c<\ccoloneqq;> \c<x \mid; \rm<`l> x. \sfun; M \mid; M M \mid; \rm<`m> a. \sfun; M \mid; `{a`} M> \br;
          \c<V> \c<\ccoloneqq;> \c<x \mid; \rm<`l> x. \sfun; M> 
        >
      >
      とする。
      このとき、&m<M> と &m<V> で定まるものをそれぞれ\em<項\fl<term>> と\em<値\fl<value>> という。
    >
  >
  \p<
    項のうち、&m<\rm<`m> a. \sfun; M> の形のものは &m<\rm<`m>>-抽象と呼ぶことがあり、&m<`{a`} M> の形をしたものは名前付き項と呼ぶことがある。
  >
  \p<
    なお、同じ記号が複数の意味合いで使われすぎるのを防ぐため、通常の慣習から以下の 2 点について記号を変えた。
    まず、名前付き項における名前は角括弧で囲むのが普通だが、角括弧は代入や環境で用いるので、それと区別するために波括弧に変更した。
    さらに、名前はギリシャ小文字で書くのが普通だが、ギリシャ小文字は後に型を導入する際に基本型の記号として使う予定なので、ここではラテン小文字を使うことにした。
  >
  \p<
    ここで、いくつか記号を用意しておく。
    まずは自由変項に関する記号について述べる。
    通常のラムダ計算と同様に、&m<\rm<`l`m>>-計算には変項の概念とそれを束縛する構文 (&m<\rm<`l>>-抽象) があるので、項の中にある変項に対して束縛されているか自由であるかのどちらかが定まる。
    そこで、項 &m<M> に対して、そこに現れる変項のうち自由であるものの全体の集合を、通常の慣習に従って &m<\op<FV> (M)> で表す。
    さらに、&m<\rm<`l`m>>-計算には名前の概念とそれを束縛する構文 (&m<\rm<`m>>-抽象) もあるので、これと同様のことは名前に対しても言える。
    項 &m<M> に現れる名前のうち自由であるものの全体の集合は、&m<\op<FN> (M)> で表すことにする。
  >
  \p<
    次は代入に関してである。
    通常のラムダ計算では、ある項 &m<M> の中に含まれる変項 &m<x> に別の項 &m<N> を (新たな束縛を回避しつつ) 代入する操作が定義されていて、その結果は &m<M `[x \coloneqq; N`]> で表された。
    &m<\rm<`l`m>>-計算でも同じ記号を用いることにする。 
    これに加えて、&m<\rm<`l`m>>-計算には変項に相当するものとして名前もあるので、名前に別の何かを代入する操作も考えられる。
    項の定義を見ると、名前を名前以外のもので置き換えてしまうと不正な項になってしまうので、名前には名前しか代入できない。
    そのような、ある項 &m<M> に含まれる名前 &m<a> を別の名前 &m<b> で置き換えたものは、変項への代入と同様の記号で &m<M `[a \coloneqq; b`]> で表すことにする。
  >
  \p<
    &m<\rm<`l`m>>-計算では、今説明した 2 種類の代入以外に考えなければならない代入がもう 1 種類ある。
    それを定義するには環境の概念が必要なので、まずはそれを定義する。
  >
  \thm|type="def"|<
    \p<
      計算体系 &m<\rm<`l`m>> において、項に含まれるある部分項を記号 &m<`[`]> に置き換えて得られるものを\em<環境\fl<environment>> という。
    >
  >
  \p<
    これは\a|href="52.html#evenv"|<定義 1.2> の評価環境に似ているが、ここでの環境は &m<`[`]> の外側がどんな形をしていても良い点が異なる。
    評価環境のときと同様に、環境 &m<E> と項 &m<M> に対し、&m<E> に含まれる &m<`[`]> を機械的に &m<M> に置き換えて得られる項を &m<E `[M`]> で表す。
  >
  \thm|type="def"|<
    \p<
      計算体系 &m<\rm<`l`m>> を考える。
      項 &m<M> と環境 &m<E> と名前 &m<a, b> に対し、項 &m<M `[a \coloneqq; b \mid; E`]> を以下によって定義する。
      まず、簡単のため、&m<M> と &m<E> の束縛変項を適切に置き換えて全て異なるようにしておき、束縛名前についても全て異なりかつ &m<a, b> のどちらでもないようにしておく。
      その上で、
      &mb<
        \array|align="rcl"|<
          \c<x `[a \coloneqq; b \mid; E`]> \c<\equiv;> \c<x> \br;
          \c<(\rm<`l> x. \sfun; P) `[a \coloneqq; b \mid; E`]> \c<\equiv;> \c<\rm<`l> x. \sfun; P `[a \coloneqq; b \mid; E`]> \br;
          \c<(P Q) `[a \coloneqq; b \mid; E`]> \c<\equiv;> \c<(P `[a \coloneqq; b \mid; E`]) (Q `[a \coloneqq; b \mid; E`])> \br;
          \c<(\rm<`m> c. \sfun; P) `[a \coloneqq; b \mid; E`]> \c<\equiv;> \c<\rm<`m> c. \sfun; P  `[a \coloneqq; b \mid; E`]> \br;
          \c<(`{c`} P) `[a \coloneqq; b \mid; E`]> \c<\equiv;> \c<\case<
            \c<`{b`} \sfun; E `[P `[a \coloneqq; b \mid; E`]`]> \c<(c \equiv; a)> \br;
            \c<`{c`} \sfun; P `[a \coloneqq; b \mid; E`]> \c<(c \nequiv; a)>
          >>
        >
      >
      と再帰的に定める。
      このとき、&m<M> から &m<M `[a \coloneqq; b \mid; E`]> を得る操作を\em<混合代入\fl<mixed substitution>> という。
    >
  >
  \p<
    直観的には、&m<M> の中の &m<`{a`} P> という形の部分項を全て &m<`{b`} \sfun; E `[P`]> に置き換えて得られる項が &m<M `[a \coloneqq; b \mid; E`]> である。
  >
  \p<
    以上の準備のもと、&m<\rm<`l`m>>-計算の簡約を定義する。
    ここでは、前回までに引き続き、値呼びをベースとした簡約を考えることにする。
    なお、Parigot によるオリジナルの定義は (論文中でそう明言されているわけではないが) 名前呼びの体系であり、ここで定義する値呼びの体系は Ong–Stewart\ref|type="bib",ref="ochf"|; によるものである。
  >
  \thm|type="def"|<
    \p<
      計算体系 &m<\rm<`l`m>> の項の上の関係 &m<\rhd;> を、項 &m<M, N> と値 &m<V> に対し、
      &mb<
        \array|align="rcll"|<
          \c<(\rm<`l> x. \sfun; M) V> \c<\rhd;> \c<M `[x \coloneqq; V`]> \br;
          \c<`{b`} (\rm<`m> a. \sfun; M)> \c<\rhd;> \c<M `[a \coloneqq; b`]> \br;
          \c<\rm<`m> a. \sfun; `{a`} M> \c<\rhd;> \c<M> \c<\scas; (a \nin; \op<FN> (M))> \br;
          \c<(\rm<`m> a. \sfun; M) N> \c<\rhd;> \c<\rm<`m> b. \sfun; M `[a \coloneqq; b \mid; `[`] N`]> \c<\scas; (b \nin; \op<FN> (M) \cup; \op<FN> (N))> \br;
          \c<V (\rm<`m> a. \sfun; M)> \c<\rhd;> \c<\rm<`m> b. \sfun; M `[a \coloneqq; b \mid; V `[`]`]> \c<\scas; (b \nin; \op<FN> (M) \cup; \op<FN> (V))> \br;
        >
      >
      で定める。
      さらに、関係 &m<\squigrarr;> を &m<\rhd;> の合同閉包として定め、これを\em<値呼び簡約\fl<call-by-value reduction>> という。
    >
  >
  \p<
    ここで、&m<\rm<`l`m>>-計算の項の直観を簡単に述べよう。
    &m<\rm<`m> a. \sfun; M> という項は、この項が置かれている環境を &m<a> という名前に束縛する役割をもっている。
    それに対して &m<`{a`} M> という項は、&m<\rm<`m>>-抽象によって &m<a> に束縛された環境に &m<M> が置かれているものとして評価を行うという意味がある。
    &m<\sb<\rm<`l>><\rm<c>>>-計算では、評価環境 (つまり継続) は暗黙的に取り出されて &m<\tt|fun|<cont>> という演算子の引数に引数として渡されていたが、&m<\rm<`l`m>>-計算では、&m<\rm<`m>>-抽象によって継続が名前に束縛される。
    これによって、&m<\rm<`l`m>>-計算ではより直接的な形で一級継続が実現されているのである。
  >
  \p<
    次に、&m<\rm<`l`m>>-計算の簡約規則について解説しよう。
    &m<\rm<`l`m>>-計算の簡約規則を詳しく見る前に、まずは\a|href="53.html#locred"|<定義 2.2> &m<\sb<\rm<`l>><\rm<c>>>-計算の局所的な簡約規則 (&m<\sb<\squigrarr|ord|;><\rm<L>>> で書いたもの) を思い出そう。
    そこには、
    &mb<
      (\tt|fun|<cont> M) N \rhd; \tt|fun|<cont> (\rm<`l> k. \sfun; M (\rm<`l> x. \sfun; k (x N)))
    >
    という規則があった。
    \a|href="53.html#locglb"|<定理 2.3> によってこの規則が想定通りの振る舞いをすることは示されているが、次のような観察をしてももっともらしいことが分かる。
    この式の右辺を簡単に &m<\tt|fun|<cont> X> と書くことにする。
    右辺の &m<\tt|fun|<cont> X> と左辺の &m<\tt|fun|<cont> M> の継続関数をそれぞれ &m<Q> と &m<Q'> で表すと、&m<Q'> はまず &m<N> を適用してから &m<Q> に渡すという形になっているはずなので、
    &m<Q' \equiv; \rm<`l> x. \sfun; Q (x N)> という関係が成り立つ。
    ここで、&m<\tt|fun|<cont> M> はこれが置かれている場所における継続を &m<M> に引数として渡す項であった。
    すなわち、&m<M> は引数として &m<Q'> を受け取ることを想定している。
    そこで、上の式の右辺に簡約した後でも &m<M> に &m<Q'> すなわち &m<\rm<`l> x. \sfun; Q (x N)> が渡されるようにしないとおかしなことになる。
    この &m<Q> は上式の右辺において &m<X> の引数として渡されるので、&m<X> の形としては、まず &m<Q> を受け取るためにラムダ抽象 &m<\rm<`l> k> から始め、&m<M> に &m<\rm<`l> x. \sfun; k (x N)> を渡すという項を書いたものが適切だと考えられ、実際にそうなっている。
  >
  \p<
    この観察のもと、&m<\rm<`l`m>>-計算の
    &mb<
      (\rm<`m> a. \sfun; M) N \rhd; \rm<`m> b. \sfun; M `[a \coloneqq; b \mid; `[`] N`]
    >
    を見てみよう。
    右辺は簡単に &m<\rm<`m> b. \sfun; X> と書くことにする。
    左辺の &m<M> の中に現れる &m<`{a`} P> という形の項は、すでに述べたように &m<\rm<`m> a. \sfun; M> が置かれている環境での &m<P> を表している。
    このことは、上の式の右辺に簡約した後でも成立しなければならない。
    右辺で &m<\rm<`m> b. \sfun; X> が置かれている環境は、左辺では &m<N> を引数として適用した後に &m<\rm<`m> a. \sfun; M> が置かれている環境に渡すというものである。
    したがって、左辺で &m<`{a`} P> が表していたものと同じものを右辺でも実現するには、&m<`{b`} PN> という形に置き換えなければならない。
    ところで、&m<X> の定義である &m<M `[a \coloneqq; b \mid; `[`] N`]> という混合代入は、まさにそれを行う操作であった。
    以上のように考えると、上記の簡約規則がもっともらしいと感じられるだろう。
  >
  \p<
    最後に、&m<\sb<\rm<`l>><\rm<c>>>-計算が &m<\rm<`l`m>>-計算の中でシミュレートできることを述べて、今日の内容を終わりとする。
    &m<\rm<`l`m>>-計算において、
    &mb<
      \array|align="rcl"|<
        \c<\rm<abort>> \c<\equiv;> \c<\rm<`l> m. \sfun; \rm<`m> b. \sfun; m> \br;
        \c<\rm<cont>> \c<\equiv;> \c<\rm<`l> m. \sfun; \rm<`m> a. \sfun; m (\rm<`l> x. \sfun; \rm<`m> b. \sfun; `{a`} x)> \br;
      >
    >
    とおく。
    すると、任意の値呼び評価環境 &m<E> と項 &m<M> と名前 &m<k> に対して、
    &mb<
      \array|align="rcl"|<
        \c<`{k`} E `[\rm|fun|<abort> M`]> \c<\sp<\squigrarr;><*>> \c<M> \br;
        \c<`{k`} E `[\rm|fun|<cont> M`]> \c<\sp<\squigrarr;><*>> \c<M (\rm<`l> x. \sfun; \rm|fun|<abort> [] `{k`} E `[x`]))>
      >
    >
    が成り立つことが、&m<E> に関する帰納法で簡単に示せる。
    これは、評価環境の先頭に &m<`{k`}> が付いていることを除けば、&m<\sb<\rm<`l>><\rm<c>>>-計算の簡約規則と同一である。
    先頭に &m<`{k`}> が必要なのは、&m<\rm<`m>>-抽象は名前付き項にされないと簡約が進まないというテクニカルな理由によるものである。
  >
  \h1<参考文献>
  \ol<
    \li|id="ochf"|<C.-H. L. Ong, C. A. Stewart (1997)「A Curry-Howard foundation for functional computation with control」『Proceedings of the 24th ACM SIGPLAN-SIGACT symposium on principles of programming languages』215–227>
    \li|id="plca"|<M. Parigot (1992)「&m<\rm<`l`m>>-calculus: an algorithmic interpretation of classical natural deduction」『Lecture Notes in Artificial Intelligence』624:190–201>
  >

>