\zml?|version="1.1"|;
\xml?|version="1.0",encoding="UTF-8"|;


\page<
  \name<質料射と形相射>
  \use-math|prefix="4"|;

  \h1<日記 (2019 年 11 月 29 日)>
  \p<
    \a|href="22.html"|<11 月 16 日>に引き続き、今回は hylomorphism と metamorphism を定義する。
  >
  \p<
    これらの射は、下方射や上方射と同様に、ある自己関手 &m<F> に対する &m<F>-始代数や &m<F>-終余代数から誘導されるものである。
    しかし、全ての (もちろん &m<F>-始代数や &m<F>-終余代数が存在するのは前提として) &m<F> に対して定義できるわけではなく、&m<F> がある特殊な性質をさらに満たしている必要がある。
  >
  \p<
    まず、\a|href="24.html#iniso"|<命題 3.1> を思い出そう。
    この命題によると、&m<F>-始代数 &m<(S, `s)> に定まっている &m<`s> は同型射であるから、逆射 &m<\sp<`s><-1>: S \to; F S> が存在する。
    これによって、&m<F>-余代数 &m<(S, \sp<`s><-1>)> が誘導されることになる。
    これは一般に &m<F>-終余代数になるとは限らない。
    そして、これが &m<F>-終余代数になるというのが、今回重要になる特殊な性質である。
  >
  \p<
    同じ議論は &m<F>-終余代数から始めることもできる。
    &m<F>-終余代数 &m<(T, `t)> があると、先程の命題の証明と同様にして &m<`t> が同型射になることが示せるので、&m<F>-代数 &m<(T, \sp<`t><-1>)> が誘導される。
    これも一般に &m<F>-始代数になるわけではない。
  >
  \p<
    以上により、始代数が誘導する余代数が終余代数になるという主張と、終余代数が誘導する代数が始代数になるという主張が考えられるが、これは同値になる。
  >
  \thm|type="prp"|<
    \p<
      圏 &m<\scr<C>> 上の自己関手 &m<F: \scr<C> \to; \scr<C>> をとる。
      2 つの条件
    >
    \ul<
      \li<
        ある &m<F>-代数 &m<(S, `s)> が &m<F>-始代数であり、これが誘導する &m<F>-余代数 &m<(S, \sp<`s><-1>)> は &m<F>-終余代数である。
      >
      \li<
        ある &m<F>-余代数 &m<(T, `t)> が &m<F>-終余代数であり、これが誘導する &m<F>-代数 &m<(T, \sp<`t><-1>)> は &m<F>-始代数である。
      >
    >
    \p<
      は同値である。
    >
  >
  \prf<
    \p<
      自明である。
    >
  >
  \thm|type="def"|<
    \p<
      圏 &m<\scr<C>> 上の自己関手 &m<F: \scr<C> \to; \scr<C>> をとる。
      &m<F> が上の命題の同値な 2 条件のいずれか (したがって両方) を満たすとき、&m<F> は\def<代数的コンパクト\fl<algebraically compact>> であるという。
    >
  >
  \p<
    &m<F> が代数的コンパクトであるとは、要するに &m<F>-始代数と &m<F>-終余代数が一致するということである。
  >
  \p<
    今後のため、いくつか記号を用意しておく。
    自己関手 &m<F> に対し、&m<F>-始代数と &m<F>-終余代数をそれぞれ &m<\bf<`m> F> と &m<\bf<`n> F> で表すことにする。
    &m<F> が代数的コンパクトであればこの 2 つは一致するので、その場合は一致していることを明確にするため記号を変えて &m<\bf<`f> F> と書くことにする。
  >
  \p<
    さて、代数的コンパクトな関手の例が気になるところだが、残念ながら &m<\bfrm<Set>> 上の自己関手は代数的コンパクトになりづらく、私は定値関手くらいしか知らない。
    例えば、\a|href="22.html"|<11 月 16 日>に例として挙げた関手
    &mb<
      \array|align="rrcl"|<
        \c<\sb<F><V>:> \c<\bfrm<Set>> \c<\longto;> \c<\bfrm<Set>> \br;
        \c; \c<A> \c<\longmapsto;> \c<1 + V \times; A>
      >
    >
    を考えると、&m<\sb<F><V>>-始代数が &m<V> の元から成る有限リスト全体であった一方、&m<\sb<F><V>>-終余代数は &m<V> の元から成る有限もしくは無限のリスト全体であったから、これらは一致しておらず &m<\sb<F><V>> は代数的コンパクトではない。
    多くの &m<\bfrm<Set>> 上の自己関手 &m<F> に対し、&m<F>-始代数はある意味「有限的」な値の集まりになり、&m<F>-終余代数は「無限的」な値の集まりになってしまうのが原因である。
  >
  \p<
    点付き完備順序集合と厳密連続写像が成す圏 (\a|href="../mathematics/33.html"|<ここ>で &m<\sb<\bfrm<PDcpo>><!>> と書かれている圏) であれば、実用上現れるような関手は全て代数的コンパクトになることが知られている。
    これについてはここでは詳しく触れない。
    とりあえず現段階では、多くの関手が代数的コンパクトになってくれるような都合の良い圏が存在することだけ留意しておいてもらえれば良い。
  >
  \p<
    さて、hylomorphism を定義する。
    相変わらず勝手に日本語訳を当てる。
  >
  \thm|type="def"|<
    \p<
      圏 &m<\scr<C>> 上の代数的コンパクトな自己関手 &m<F: \scr<C> \to; \scr<C>> をとる。
      &m<F>-代数 &m<(A, `a)> と &m<F>-余代数 &m<(C, `g)> に対し、合成
      &mb<
        \diag|hor="thk"|<
          \v<C> \v<\bf<`f> F> \v<A>
          \ar|s="1",e="2"|<\op<ana> (C, `g)> \ar|s="2",e="3"|<\op<cata> (A, `a)>
        >
      >
      を、&m<(A, `a)> と &m<(C, `g)> による\def<質料射\fl<hylomorphism>> と呼んで &m<\op<hylo> (A, C, `a, `g)> で表す。
    >
  >
  \p<
    metamorphism はこの双対概念で、射の合成の順序が逆になる。
  >
  \thm|type="def"|<
    \p<
      圏 &m<\scr<C>> 上の代数的コンパクトな自己関手 &m<F: \scr<C> \to; \scr<C>> をとる。
      対象が同じ &m<F>-代数 &m<(A, `a)> と &m<F>-余代数 &m<(A, `g)> に対し、合成
      &mb<
        \diag|hor="thk"|<
          \v<\bf<`f> F> \v<A> \v<\bf<`f> F> 
          \ar|s="1",e="2"|<\op<cata> (A, `a)> \ar|s="2",e="3"|<\op<ana> (A, `g)> 
        >
      >
      を、&m<(A, `a)> と &m<(A, `g)> による\def<形相射\fl<metamorphism>> と呼んで &m<\op<meta> (A, `a, `g)> で表す。
    >
  >
  \p<
    では具体例といきたいところだが、すでに述べたように、直感的に理解しやすい &m<\bfrm<Set>> 上の自己関手はあまり代数的コンパクトにならないので、数学的文脈での例は少し挙げづらい。
    次回は質料射と形相射を Haskell で実装しようと思っているので、具体例はそのときまで先送りにすることにする。
  >

>