\zml?|version="1.1"|;
\xml?|version="1.0",encoding="UTF-8"|;


\page<
  \name<lens の仕組みを理解したい (その 2)>

  \h1<日記 (2019 年 4 月 29 日)>
  \p<
    \a|href="20.html"|<4 月 25 日> では、lens パッケージに定義されている \m<Lens' s a> という型の意味や有用性について軽く説明しました。
    今回は、lens パッケージにある他の型について触れていこうと思います。
  >
  \p<
    まず、前回扱った \m<Lens' s a> 型ですが、これは以下のような定義でした。
  >
  \pre~*<
    type Lens' s a = forall f. Functor f =`> (a -`> f a) -`> (s -`> f s)
  >
  \p<
    ここには \c~<(a -`> f a) -`> (s -`> f s)> という形が出てきています。
    \m<Lens' s a> の定義では \m<f> に \m<Functor> であるという制約が課されていますが、実は \m<f> にどのような制約をかけるかで、この型は様々な意味のあるものに化けていきます。
  >
  \p<
    さて、前回説明したように、\m<Lens' s a> 型はゲッターとセッターを合わせたような型でした。
    しかし、必ずしもゲッターとセッターが両方用意できるとは限りません。
    例えば、リストからその長さを取り出すゲッターを考えることはできますが、リストの長さだけを設定するということは考えにくいので、このゲッターに対応するセッターは作りにくいです。
    そこで、「ゲッターの機能だけのレンズ」というものがあれば便利です。
  >
  \p<
    ゲッターだけなわけなので、単にゲッターを表す \m<s -`> a> 型を「ゲッターの機能だけのレンズ」の型として採用すれば良いように思えます。
    しかし、\m<s -`> a> 型と \m<Lens' s a> 型では形に互換性がないため、例えば \m<s -`> a> 型を要求する関数に \m<Lens' s a> 型の値を渡すことはできません。
    ゲッターの機能だけのレンズを受け取る関数に、ゲッターの機能も当然もつ普通のレンズが渡せない (もしくは渡すのに変換が必要になる) のは、少し不便です。
  >
  \p<
    しかし実は、\m<Lens' s a> 型に出てくる \m<f> に対して \m<Functor> の他に \m<Contravariant> をさらに課すと、ゲッターを表す \m<s -`> a> 型と同型な型が作れます。
    これは lens パッケージでは \m<Getter s a> として定義されています。
  >
  \pre~*<
    type Getter s a = forall f. (Contravariant f, Functor f) =`> (a -`> f a) -`> (s -`> f s)
  >
  \p<
    ちょっと \m<Contravariant> について触れておきましょう。
    これは \m<Functor> と非常に似ている型クラスです。
    \m<Functor> には \m<fmap> という関数が定義されていて、\m<u -`> v> 型の普通の関数があると、\m<f u -`> f v> 型の文脈に包まれた値を操作する関数に持ち上げることができます。
    \m<Contravariant> では、この変換後の関数の向きが逆になります。
    より具体的には、\m<Contravariant> には \m<fmap> の代わりに \m<contramap> という関数があり、\m<u -`> v> 型の関数に対して \m<f v -`> f u> 型の関数を作ります。
  >
  \pre~*<
    class Contravariant f where
      contramap :: (u -`> v) -`> (f v -`> f u)
  >
  \p<
    \m<Contravariant> の例ですが、定値関手を表す \m<Const a> がまずそうです。
    \m<Const a> の \m<fmap> は実質的に全てを恒等関数に移すと実装されてるので、向きが逆になろうとそのまま \m<contramap> の実装として使えます。
  >
  \pre~*<
    instance Contravariant (Const a) where
      contramap :: (u -`> v) -`> (Const a v -`> Const a u)
      contramap _ (Const aVal) = Const aVal
  >
  \p<
    さて、改めて \m<Getter s a> の定義を見てみましょう。
    \m<f> に \m<Functor> と \m<Contravariant> の両方が課されているので、\m<u -`> v> 型の関数があると、\m<fmap> を使って \m<f u -`> f v> 型の関数も作れますし、\m<contramap> を使って \m<f v -`> f u> 型関数も作れることになります。
  >
  \p<
    \m<contramap> が利用できるおかげで、以下のように \m<s -`> a> 型の普通のゲッターがあると、\m<Getter s a> 型のレンズ版ゲッターが作れます。
  >
  \pre~*<
    toGetter :: (s -`> a) -`> Getter s a
    toGetter get = \func -`> contramap get . func . get
  >
  \p<
    すでに述べたように \m<Const a> は \m<Functor> にも \m<Contravariant> にもなるので、逆は前と同じです。
  >
  \pre~*<
    -- ((a -`> Const a a) -`> (s -`> Const a s)) -`> (s -`> a) だと思っている
    toGet :: Getter s a -`> (s -`> a)
    toGet getter = \sVal -`> getConst $ getter Const sVal
  >
  \p<
    厳密な証明は省きますが、この 2 つの関数は互いに逆になっています。
    つまり、\m<s -`> a> 型と \m<Getter s a> 型が本質的に同じものということなので、ゲッターの型としては本質的にはどちらを使っても良いわけです。
    しかし、\m<Getter s a> の方は \m<Lens' s a> と型制約だけが異なるだけで、型の本体は全く同じです。
    このおかげで、\m<Getter s a> 型として宣言された値を \m<Lens' s a> 型を受け取る関数にそのまま渡すことができます。
    通常、ある関数が異なる型の値を引数に受け取りたい場合は、あらかじめ型を変換させるかその関数を多相化する必要がありますが、違いが型制約だけになっているおかげでこの手間がありません。
    画期的ですね!
  >
  \p<
    ということで、今回はゲッターのみの機能をもつレンズについて扱いました。
    実際はセッターのみのレンズを扱いたいと思います。
  >

>